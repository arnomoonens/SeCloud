"target","text"
0,"assert(value[, message])"
0,"assert.deepEqual(actual, expected[, message])"
0,"assert.deepStrictEqual(actual, expected[, message])"
0,"assert.doesNotThrow(block[, error][, message])"
0,"assert.equal(actual, expected[, message])"
0,"assert.fail(actual, expected, message, operator)"
0,"assert.ifError(value)"
1,"buf.readDoubleBE(offset[, noAssert])"
1,"buf.readDoubleLE(offset[, noAssert])"
1,"buf.readFloatBE(offset[, noAssert])"
1,"buf.readFloatLE(offset[, noAssert])"
1,"buf.readInt8(offset[, noAssert])"
1,"buf.readInt16BE(offset[, noAssert])"
1,"buf.readInt16LE(offset[, noAssert])"
1,"buf.readInt32BE(offset[, noAssert])"
1,"buf.readInt32LE(offset[, noAssert])"
1,"buf.readUInt8(offset[, noAssert])"
1,"buf.readUInt32BE(offset[, noAssert])"
1,"buf.readUIntBE(offset, byteLength[, noAssert])"
2,"buf.write(string[, offset[, length]][, encoding])"
2,"buf.writeDoubleBE(value, offset[, noAssert])"
2,"buf.writeDoubleLE(value, offset[, noAssert])"
2,"buf.writeFloatBE(value, offset[, noAssert])"
2,"buf.writeFloatLE(value, offset[, noAssert])"
2,"buf.writeInt8(value, offset[, noAssert])"
2,"buf.writeInt16BE(value, offset[, noAssert])"
2,"buf.writeInt16LE(value, offset[, noAssert])"
2,"buf.writeInt32BE(value, offset[, noAssert])"
2,"buf.writeInt32LE(value, offset[, noAssert])"
2,"buf.writeIntLE(value, offset, byteLength[, noAssert])"
2,"buf.writeUInt8(value, offset[, noAssert])"
2,"buf.writeUInt32BE(value, offset[, noAssert])"
2,"buf.writeUIntLE(value, offset, byteLength[, noAssert])"
2,"child_process.exec(command[, options][, callback])"
2,"child_process.execFile(file[, args][, options][, callback])"
2,"child_process.execFileSync(file[, args][, options])"
2,"child_process.execSync(command[, options])"
1,"crypto.getCiphers()"
1,"crypto.getCurves()"
1,"crypto.getDiffieHellman(group_name)"
1,"crypto.getHashes()"
2,"cipher.setAAD(buffer)"
1,"cipher.getAuthTag()"
2,"decipher.setAAD(buffer)"
2,"decipher.setAuthTag(buffer)"
0,"diffieHellman.generateKeys([encoding])"
1,"diffieHellman.getGenerator([encoding])"
1,"diffieHellman.getPrime([encoding])"
1,"diffieHellman.getPrivateKey([encoding])"
2,"diffieHellman.setPrivateKey(private_key[, encoding])"
2,"diffieHellman.setPublicKey(public_key[, encoding])"
0,"ecdh.computeSecret(other_public_key[, input_encoding][, output_encoding])"
0,"ecdh.generateKeys([encoding[, format]])"
1,"ecdh.getPrivateKey([encoding])"
1,"ecdh.getPublicKey([encoding[, format]])"
2,"ecdh.setPublicKey(public_key[, encoding])"
0,"hmac.digest([encoding])"
0,"dgram.createSocket(options[, callback])"
0,"dgram.createSocket(type[, callback])"
0,"socket.addMembership(multicastAddress[, multicastInterface])"
0,"socket.bind(options[, callback])"
0,"socket.close([callback])"
0,"socket.send(msg, [offset, length,] port, address[, callback])"
0,"socket.setBroadcast(flag)"
0,"socket.setMulticastLoopback(flag)"
0,"socket.ref()"
1,"dns.getServers()"
0,"dns.lookup(hostname[, options], callback)"
0,"dns.resolve(hostname[, rrtype], callback)"
0,"dns.resolve6(hostname[, options], callback)"
0,"dns.resolveMx(hostname, callback)"
0,"dns.resolvePtr(hostname, callback)"
0,"dns.reverse(ip, callback)"
2,"dns.setServers(servers)"
0,"os.arch()"
0,"os.cpus()"
0,"os.freemem()"
1,"os.hostname()"
0,"os.loadavg()"
0,"os.platform()"
0,"os.totalmem()"
0,"os.type()"
1,"os.userInfo([options])"
1,"path.basename(path[, ext])"
0,"path.dirname(path)"
0,"path.format(pathObject)"
0,"path.join([...paths])"
0,"path.normalize(path)"
0,"path.relative(from, to)"
0,"path.resolve([...paths])"
0,"querystring.escape(str)"
1,"querystring.parse(str[, sep[, eq[, options]]])"
0,"querystring.stringify(obj[, sep[, eq[, options]]])"
0,"EventEmitter.listenerCount(emitter, eventName)"
0,"emitter.emit(eventName[, ...args])"
1,"emitter.getMaxListeners()"
0,"emitter.listeners(eventName)"
0,"emitter.once(eventName, listener)"
0,"emitter.prependOnceListener(eventName, listener)"
0,"emitter.removeAllListeners([eventName])"
0,"emitter.setMaxListeners(n)"
0,"Event: 'newListener'"
0,"fs.access(path[, mode], callback)"
0,"fs.accessSync(path[, mode])"
0,"fs.appendFileSync(file, data[, options])"
0,"fs.chown(path, uid, gid, callback)"
0,"fs.close(fd, callback)"
0,"fs.createReadStream(path[, options])"
2,"fs.createWriteStream(path[, options])"
0,"fs.exists(path, callback)"
0,"fs.existsSync(path)"
0,"fs.fchmod(fd, mode, callback)"
0,"fs.fchmodSync(fd, mode)"
0,"fs.fdatasync(fd, callback)"
0,"fs.fsync(fd, callback)"
0,"fs.ftruncate(fd, len, callback)"
0,"fs.futimes(fd, atime, mtime, callback)"
0,"fs.futimesSync(fd, atime, mtime)"
0,"fs.lchmodSync(path, mode)"
0,"fs.link(existingPath, newPath, callback)"
0,"fs.mkdtemp(prefix[, options], callback)"
1,"fs.open(path, flags[, mode], callback)"
1,"fs.openSync(path, flags[, mode])"
1,"fs.read(fd, buffer, offset, length, position, callback)"
1,"fs.readdir(path[, options], callback)"
1,"fs.readdirSync(path[, options])"
1,"fs.readFile(file[, options], callback)"
1,"fs.readFileSync(file[, options])"
1,"fs.readlink(path[, options], callback)"
1,"fs.realpath(path[, options], callback)"
0,"fs.rename(oldPath, newPath, callback)"
0,"fs.renameSync(oldPath, newPath)"
0,"fs.rmdirSync(path)"
0,"fs.stat(path, callback)"
0,"fs.symlinkSync(target, path[, type])"
0,"fs.truncate(path, len, callback)"
0,"fs.unlink(path, callback)"
0,"fs.unwatchFile(filename[, listener])"
0,"fs.utimes(path, atime, mtime, callback)"
0,"fs.watch(filename[, options][, listener])"
2,"fs.write(fd, buffer[, offset[, length[, position]]], callback)"
2,"fs.write(fd, string[, position[, encoding]], callback)"
2,"fs.writeFile(file, data[, options], callback)"
2,"fs.writeFileSync(file, data[, options])"
2,"fs.writeSync(fd, string[, position[, encoding]])"
0,"http.createServer([requestListener])"
1,"http.get(options[, callback])"
0,"http.request(options[, callback])"
2,"agent.createConnection(options[, callback])"
1,"agent.getName(options)"
0,"request.setNoDelay([noDelay])"
0,"request.setSocketKeepAlive([enable][, initialDelay])"
2,"request.write(chunk[, encoding][, callback])"
1,"response.getHeader(name)"
0,"response.removeHeader(name)"
2,"response.writeHead(statusCode[, statusMessage][, headers])"
0,"message.destroy([error])"
2,"message.setTimeout(msecs, callback)"
0,"https.createServer(options[, requestListener])"
1,"https.get(options, callback)"
1,"server.getConnections(callback)"
1,"socket.address()"
0,"socket.connect(options[, connectListener])"
0,"socket.connect(path[, connectListener])"
0,"socket.destroy([exception])"
1,"socket.ref()"
0,"socket.setEncoding([encoding])"
2,"socket.write(data[, encoding][, callback])"
1,"readline.createInterface(options)"
0,"readline.cursorTo(stream, x, y)"
2,"readline.emitKeypressEvents(stream[, interface])"
0,"rl.close()"
0,"rl.pause()"
0,"rl.resume()"
2,"rl.write(data[, key])"
0,"stringDecoder.end([buffer])"
2,"stringDecoder.write(buffer)"
0,"tls.connect(port[, host][, options][, callback])"
0,"tls.connect(path[, options][, callback])"
0,"tls.connect(options[, callback])"
1,"tls.getCiphers()"
1,"server.address()"
0,"server.close([callback])"
0,"server.listen(port[, hostname][, callback])"
1,"tlsSocket.address()"
1,"tlsSocket.getCipher()"
1,"tlsSocket.getEphemeralKeyInfo()"
1,"tlsSocket.getPeerCertificate([ detailed ])"
1,"tlsSocket.getProtocol()"
1,"tlsSocket.getSession()"
1,"tlsSocket.getTLSTicket()"
2,"tlsSocket.setMaxSendFragment(size)"
0,"tty.isatty(fd)"
2,"readStream.setRawMode(mode)"
0,"vm.isContext(sandbox)"
0,"vm.runInContext(code, contextifiedSandbox[, options])"
0,"vm.runInDebugContext(code)"
0,"vm.runInNewContext(code[, sandbox][, options])"
0,"vm.runInThisContext(code[, options])"
0,"new vm.Script(code, options)"
0,"script.runInNewContext([sandbox][, options])"
0,"script.runInThisContext([options])"
0,"zlib.createDeflate([options])"
0,"zlib.createDeflateRaw([options])"
0,"Class: Buffer"
0,"clearImmediate(immediateObject)"
0,"clearInterval(intervalObject)"
0,"clearTimeout(timeoutObject)"
0,"console"
2,"setImmediate(callback[, ...args])"
2,"setInterval(callback, delay[, ...args])"
2,"setTimeout(callback, delay[, ...args])"
0,"process.abort()"
0,"process.chdir(directory)"
0,"process.cpuUsage([previousValue])"
0,"process.cwd()"
0,"process.disconnect()"
0,"process.emitWarning(warning[, name][, ctor])"
0,"process.exit([code])"
1,"process.getegid()"
1,"process.geteuid()"
1,"process.getgid()"
1,"process.getgroups()"
1,"process.getuid()"
0,"process.kill(pid[, signal])"
0,"process.memoryUsage()"
0,"process.nextTick(callback[, ...args])"
0,"process.send(message[, sendHandle[, options]][, callback])"
2,"process.setegid(id)"
2,"process.seteuid(id)"
2,"process.setgid(id)"
2,"process.setgroups(groups)"
2,"process.setuid(id)"
2,"writable.end([chunk][, encoding][, callback])"
2,"writable.setDefaultEncoding(encoding)"
2,"writable.uncork()"
2,"writable.write(chunk[, encoding][, callback])"
1,"readable.isPaused()"
1,"readable.pause()"
1,"readable.pipe(destination[, options])"
1,"readable.read([size])"
1,"readable.resume()"
1,"readable.setEncoding(encoding)"
2,"setImmediate(callback[, ...args])"
2,"setInterval(callback, delay[, ...args])"
0,"clearImmediate(immediate)"
0,"clearInterval(timeout)"
0,"clearTimeout(timeout)"
0,"timeout.unref()"
1,"url.format(urlObject)"
1,"url.parse(urlString[, parseQueryString[, slashesDenoteHost]])"
1,"url.resolve(from, to)"
1,"require('url').domainToAscii(domain)"
1,"url.toString()"
1,"urlSearchParams.append(name, value)"
1,"urlSearchParams.delete(name)"
1,"urlSearchParams.entries()"
1,"urlSearchParams.forEach(fn)"
1,"urlSearchParams.get(name)"
1,"urlSearchParams.getAll(name)"
1,"urlSearchParams.has(name)"
1,"urlSearchParams.keys()"
2,"urlSearchParams.set(name, value)"
1,"urlSearchParams.toString()"
1,"urlSearchParams.values()"
